---
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Header from '../components/Header.astro';
import { SITE_DESCRIPTION, SITE_TITLE } from '../consts';

const posts = (await getCollection('blog')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);

// Character classes and icons for ranking
const characterClasses = ['전사', '마법사', '궁수', '도적', '승려', '기사', '흑마법사', '성직자', '바드', '소환사'];
const characterIcons = ['⚔️', '🔮', '🏹', '🗡️', '🙏', '🛡️', '💀', '✨', '🎵', '🐉'];
const elementIcons = ['🔥', '❄️', '⚡', '🌿', '💨', '🌊', '☀️', '🌙'];

// Calculate pseudo-stats for each post based on title/date
function getPostStats(post: any, index: number) {
	const baseLevel = 99 - index;
	const titleLength = post.data.title.length;
	const daysSincePublish = Math.floor((Date.now() - post.data.pubDate.getTime()) / (1000 * 60 * 60 * 24));
	
	return {
		level: Math.max(1, baseLevel),
		hp: 310 + (titleLength * 10) + Math.floor(Math.random() * 200),
		mp: 100 + Math.floor(Math.random() * 100),
		atk: 35 + Math.floor(Math.random() * 30),
		def: 30 + Math.floor(Math.random() * 25),
		agi: 20 + Math.floor(Math.random() * 20),
		int: 25 + Math.floor(Math.random() * 25),
		exp: Math.max(0, 1000 - daysSincePublish * 10),
		class: characterClasses[index % characterClasses.length],
		icon: characterIcons[index % characterIcons.length],
		element: elementIcons[index % elementIcons.length]
	};
}
---

<!doctype html>
<html lang="ko">
	<head>
		<BaseHead title={`${SITE_TITLE} - Power Rankings`} description={SITE_DESCRIPTION} />
		<style>
			body {
				margin: 0;
				padding: 0;
				background: #2A3939;
			}

			.ranking-container {
				max-width: 1200px;
				margin: 0 auto;
				padding: 8px;
			}

			/* Title Bar */
			.ranking-header {
				background: var(--rpg-header-bg);
				border: 2px solid var(--rpg-border-outer);
				padding: 8px;
				margin-bottom: 8px;
				text-align: center;
				box-shadow: 
					inset -1px -1px 0 var(--rpg-window-dark),
					inset 1px 1px 0 var(--rpg-window-light);
				position: relative;
			}

			.ranking-title {
				color: var(--rpg-gold);
				font-size: 18px;
				font-family: 'NeoDunggeunmo', 'Galmuri14', monospace;
				text-shadow: 2px 2px 0 var(--rpg-text-shadow);
				letter-spacing: 2px;
				margin: 0;
			}

			.power-label {
				position: absolute;
				right: 16px;
				top: 50%;
				transform: translateY(-50%);
				color: var(--rpg-stat-orange);
				font-size: 14px;
				font-family: 'Galmuri11', 'NeoDunggeunmo', monospace;
			}

			/* Main Ranking Table */
			.ranking-table {
				background: var(--rpg-window-bg);
				border: 3px solid var(--rpg-border-outer);
				box-shadow: 
					inset -2px -2px 0 var(--rpg-window-dark),
					inset 2px 2px 0 var(--rpg-window-light),
					0 0 0 1px var(--rpg-border-inner);
				overflow: hidden;
			}

			.table-header {
				background: var(--rpg-header-bg);
				border-bottom: 2px solid var(--rpg-border-outer);
				display: flex;
				padding: 6px 12px;
				font-size: 11px;
				font-family: 'Galmuri9', 'NeoDunggeunmo', monospace;
				color: var(--rpg-text-normal);
				text-shadow: 1px 1px 0 var(--rpg-text-shadow);
			}

			.col-rank { width: 40px; }
			.col-name { flex: 1; min-width: 200px; }
			.col-class { width: 80px; text-align: center; }
			.col-lv { width: 40px; text-align: center; }
			.col-hp { width: 80px; text-align: right; }
			.col-mp { width: 80px; text-align: right; }
			.col-atk { width: 60px; text-align: right; }
			.col-def { width: 60px; text-align: right; }
			.col-agi { width: 60px; text-align: right; }
			.col-int { width: 60px; text-align: right; }
			.col-exp { width: 60px; text-align: right; }
			.col-item { width: 50px; text-align: center; }
			.col-el { width: 30px; text-align: center; }

			.ranking-list {
				max-height: 600px;
				overflow-y: auto;
				scrollbar-width: thin;
				scrollbar-color: var(--rpg-window-dark) var(--rpg-window-bg);
			}

			.ranking-list::-webkit-scrollbar {
				width: 12px;
			}

			.ranking-list::-webkit-scrollbar-track {
				background: var(--rpg-window-dark);
				border-left: 1px solid var(--rpg-border-outer);
			}

			.ranking-list::-webkit-scrollbar-thumb {
				background: var(--rpg-window-mid);
				border: 1px solid var(--rpg-border-outer);
			}

			.ranking-row {
				display: flex;
				padding: 4px 12px;
				border-bottom: 1px solid var(--rpg-window-dark);
				font-size: 16px;
				font-family: 'NeoDunggeunmo', 'Galmuri14', monospace;
				color: var(--rpg-text-normal);
				text-decoration: none;
				transition: all 0.1s ease;
				align-items: center;
				min-height: 28px;
			}

			.ranking-row:nth-child(even) {
				background: rgba(0, 0, 0, 0.1);
			}

			.ranking-row:hover {
				background: var(--rpg-window-dark);
				color: var(--rpg-gold);
				cursor: pointer;
			}

			.ranking-row.top3 {
				background: linear-gradient(90deg, rgba(255, 215, 0, 0.1) 0%, transparent 50%);
			}

			.ranking-row.top3 .col-rank {
				color: var(--rpg-gold);
				font-weight: bold;
				text-shadow: 1px 1px 0 rgba(0, 0, 0, 0.5);
			}

			/* Stat colors */
			.stat-high {
				color: var(--rpg-stat-orange);
			}

			.stat-mid {
				color: var(--rpg-stat-green);
			}

			.stat-low {
				color: var(--rpg-stat-blue);
			}

			/* Character Icons Panel */
			.character-panel {
				background: var(--rpg-window-bg);
				border: 2px solid var(--rpg-border-outer);
				margin-top: 8px;
				padding: 8px;
				display: flex;
				justify-content: center;
				gap: 4px;
				flex-wrap: wrap;
				box-shadow: 
					inset -1px -1px 0 var(--rpg-window-dark),
					inset 1px 1px 0 var(--rpg-window-light);
			}

			.char-slot {
				width: 48px;
				height: 48px;
				background: var(--rpg-window-dark);
				border: 1px solid var(--rpg-border-outer);
				display: flex;
				align-items: center;
				justify-content: center;
				font-size: 24px;
				position: relative;
				cursor: pointer;
				transition: all 0.1s ease;
			}

			.char-slot:hover {
				background: var(--rpg-window-mid);
				transform: translateY(-2px);
			}

			.char-slot .char-number {
				position: absolute;
				bottom: -2px;
				right: -2px;
				background: var(--rpg-header-bg);
				color: var(--rpg-gold);
				font-size: 10px;
				padding: 1px 4px;
				border: 1px solid var(--rpg-border-outer);
				font-family: 'Galmuri9', 'NeoDunggeunmo', monospace;
			}

			/* Mobile Responsive */
			@media (max-width: 768px) {
				.table-header,
				.ranking-row {
					font-size: 10px;
					padding: 4px 8px;
				}

				.col-mp, .col-def, .col-agi, .col-int {
					display: none;
				}

				.col-name {
					min-width: 120px;
				}
			}

			@media (max-width: 480px) {
				.col-atk, .col-exp, .col-el {
					display: none;
				}
			}

			.name-link {
				color: inherit;
				text-decoration: none;
				display: block;
				width: 100%;
				white-space: nowrap;
				overflow: hidden;
				text-overflow: ellipsis;
			}

			.ranking-row:hover .name-link {
				color: var(--rpg-gold);
			}

			/* Boss indicator */
			.boss-crown {
				color: var(--rpg-gold);
				margin-right: 4px;
			}
		</style>
	</head>
	<body>
		<Header />
		<div class="ranking-container">
			<div class="ranking-header">
				<h1 class="ranking-title">◆ POWER RANKING ◆</h1>
				<span class="power-label">POWER {posts.length * 100}</span>
			</div>

			<div class="ranking-table">
				<div class="table-header">
					<div class="col-rank">NO</div>
					<div class="col-name">NAME</div>
					<div class="col-class">CLASS</div>
					<div class="col-lv">LV</div>
					<div class="col-hp">HP/MH</div>
					<div class="col-mp">MP</div>
					<div class="col-atk">AT/AR</div>
					<div class="col-def">DF/DR</div>
					<div class="col-agi">AG</div>
					<div class="col-int">MD</div>
					<div class="col-exp">FT</div>
					<div class="col-item">ITEM</div>
					<div class="col-el">EL</div>
				</div>

				<div class="ranking-list">
					{posts.map((post, index) => {
						const stats = getPostStats(post, index);
						const isTop3 = index < 3;
						
						return (
							<a href={`/${post.id}/`} class={`ranking-row ${isTop3 ? 'top3' : ''}`}>
								<div class="col-rank">
									{index === 0 && <span class="boss-crown">👑</span>}
									{index + 1}
								</div>
								<div class="col-name">
									<span class="name-link" title={post.data.title}>
										{post.data.title}
									</span>
								</div>
								<div class="col-class">{stats.class}</div>
								<div class={`col-lv ${stats.level > 80 ? 'stat-high' : stats.level > 50 ? 'stat-mid' : 'stat-low'}`}>
									{stats.level}
								</div>
								<div class="col-hp">{stats.hp}</div>
								<div class="col-mp">{stats.mp}</div>
								<div class={`col-atk ${stats.atk > 50 ? 'stat-high' : 'stat-mid'}`}>
									{stats.atk}
								</div>
								<div class="col-def">{stats.def}</div>
								<div class="col-agi">{stats.agi}</div>
								<div class="col-int">{stats.int}</div>
								<div class="col-exp">{stats.exp}</div>
								<div class="col-item">{stats.icon}</div>
								<div class="col-el">{stats.element}</div>
							</a>
						);
					})}
				</div>
			</div>

			<div class="character-panel">
				{posts.slice(0, 12).map((post, index) => {
					const stats = getPostStats(post, index);
					return (
						<div class="char-slot" title={post.data.title}>
							{stats.icon}
							<span class="char-number">{index + 1}</span>
						</div>
					);
				})}
			</div>
		</div>
		<Footer />
	</body>
</html>